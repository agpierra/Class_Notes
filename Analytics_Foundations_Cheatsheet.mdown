# Analytics Foundations Cheat Sheet

![alt text](Pictures/overview_stats_models.png)

## Proc MEANS

```
proc means data = *SAS-data-set* options;
	class *variables*;
	var *variables*;
run;
```

`class` specifies variables whose values define the subgroup gombinations for the anlysis.

`var` specifies numeric variables for which you want to calculate descriptive statistics.

In `proc means` statement options:
- `clm` requests confidence limits for the mean
- `stderr` requests the standard error of the mean
- `alpha=` constructs confidence intervals with a different confidence level

### Example

```
proc means data=sasuser.testscores;
    var SATScore;
    title 'Descriptive Statistics Using PROC MEANS';
run;
```

Produces:

```
                                      The MEANS Procedure

                                 Analysis Variable : SATScore

               N            Mean         Std Dev         Minimum         Maximum
              ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ
              80         1190.63     147.0584466     890.0000000         1600.00
              ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ
```

By default, SAS prints the lines above. You can add options to means statement to request additional or alternate statistics.


```
/*st101d01.sas*/  /*Part C*/
proc means data=sasuser.testscores 
           maxdec=2 
           n mean median std q1 q3 qrange;
    var SATScore;
    title 'Selected Descriptive Statistics for SAT Scores';
run;
```

Produces:

```
                                      The MEANS Procedure

                                 Analysis Variable : SATScore

                                                          Lower          Upper       Quartile
  N           Mean         Median        Std Dev       Quartile       Quartile          Range
 ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ
 80        1190.63        1170.00         147.06        1085.00        1280.00         195.00
 ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ

```

### Exercise

Data in sasuser.NormTemp is from an article which questions the notion that the true mean body temperature is 98.6. There are 65 males and 65 females. There is also some question about whether mean body temperatures for women are the same as for men. The variables in data are:

`ID` Identification number

`BodyTemp` Body temperature

`Gender` Coded(M,F)

`HeartRate` Heart rate in bpm

Use `proc means` to answer:
- What is the overall mean and std of body temp in sample?
- what is the interquartile range of body temperature?
- Do the mean values seem to differ between men and women?
	- Hint: Use the `Class` statement in `proc means` with `gender` as the class variable

```	
proc means data=sasuser.NormTemp maxdec=2 mean std q1 q3 qrange;
	var BodyTemp;
	class gender;
run;
```

a) Overall mean is 98.25

b) Interquartile range is 0.90

c) Values somewhat differ


## Statistical Graphics Procedures in SAS

`proc sgscatter` creates single-cell and multi-cell scatter plots and scatter plot matrics with optional fits and ellipses.

`proc sgplot` creates single-cell plots with a variety of plot and chart types.

`proc sgpanel` creates single-page or multi-page panels of plots and charts conditional on classification variables.

`proc sgrender` provides a way to create plots from graph templates that you modified or wrote yourself.

## Proc UNIVARIATE

```
proc univariate data=*SAS-data-set* options;
	var *variables*;
	id *variable*;
	histogram *variables* / options;
	probplot *variables* / options;
	inset *keywords* / options;
run;
```

`var` specifies numeric variables to analyze

`id` specifies a variable used to label the five lowest and five highest values in the output

`histogram` creates high-resolution histograms

`probplot` creates a high-resolution Q-Q plot

`inset` places a box or table of summary statistics (called an inset) directly in a graph created with a `cdfplot`, `histogram`, `ppplot`, `probplot`, or `qqplot` statement. The `inset` statement **must** follow the `plot` statement that creates the plot that you want to augment.

`gpath= *file-specification* <(url=)>` specifies location for all graphics output generated while destination is open

**Selected option for** `HISTOGRAM` and `PROBPLOT` **statements:**

`normal<(options)>` creates a normal probability plot.
- options `(mu= sigma=)` determine the mean and std of the normal distribution used to create reference lines.
- curve overlays in `histogram` and diagonal reference line in `probplot`
- The est option requests that the value be estimated from the data `(mu=est sigma=est)`

**Selected option for** `HISTOGRAM` **statement:**

`kernel` superimposes kernel density estimates on the histogram

### Example

```
/*st101d02.sas*/  /*Part A*/
proc univariate data=sasuser.testscores;
    var SATScore;
    histogram SATScore / normal(mu=est sigma=est) kernel;
    inset skewness kurtosis / position=ne;
    probplot SATScore / normal(mu=est sigma=est);
    inset skewness kurtosis;
    title 'Descriptive Statistics Using PROC UNIVARIATE';
run;
```

Produces:

```
                                   The UNIVARIATE Procedure
                                      Variable:  SATScore

                                            Moments

                N                          80    Sum Weights                 80
                Mean                 1190.625    Sum Observations         95250
                Std Deviation      147.058447    Variance            21626.1867
                Skewness           0.64202018    Kurtosis            0.42409987
                Uncorrected SS      115115500    Corrected SS        1708468.75
                Coeff Variation    12.3513656    Std Error Mean      16.4416342


                                  Basic Statistical Measures

                        Location                    Variability

                    Mean     1190.625     Std Deviation          147.05845
                    Median   1170.000     Variance                   21626
                    Mode     1050.000     Range                  710.00000
                                          Interquartile Range    195.00000


                                  Tests for Location: Mu0=0

                       Test           -Statistic-    -----p Value------

                       Student's t    t  72.41525    Pr > |t|    <.0001
                       Sign           M        40    Pr >= |M|   <.0001
                       Signed Rank    S      1620    Pr >= |S|   <.0001


                                   Quantiles (Definition 5)

                                    Quantile      Estimate

                                    100% Max          1600
                                    99%               1600
                                    95%               1505
                                    90%               1375
                                    75% Q3            1280
                                    50% Median        1170
                                    25% Q1            1085
                                    10%               1020
                                    5%                 995
                                    1%                 890
                                    0% Min             890


                                     Extreme Observations

                             ----Lowest----        ----Highest---

                             Value      Obs        Value      Obs

                               890       69         1490        8
                               910       74         1520       42
                               970        6         1520       54
                               990       51         1590       70
                              1000        4         1600       25

```

- Mean of data is 1190.625. Approximately equal to median = 1170.
	- Distribution is fairly symmetric
- Standard deviation is 147.058.
	- Average variability around mean is appx. 147 points
- Distribution is slightly skewed to the right
- Distribution ahs slightly heavier tales than normal distribution

![alt text](Pictures/proc_uni_dist.png)

Bin identified with midpoint of 1100 has approximately 33% of the values.


```

                               Parameters for Normal Distribution

                                 Parameter   Symbol   Estimate

                                 Mean        Mu       1190.625
                                 Std Dev     Sigma    147.0584


                        Goodness-of-Fit Tests for Normal Distribution

                Test                  ----Statistic-----   ------p Value------

                Kolmogorov-Smirnov    D       0.08382224   Pr > D       >0.150
                Cramer-von Mises      W-Sq    0.09964577   Pr > W-Sq     0.114
                Anderson-Darling      A-Sq    0.70124822   Pr > A-Sq     0.068


                               Quantiles for Normal Distribution

                                          -------Quantile------
                                Percent    Observed   Estimated

                                    1.0     890.000     848.516
                                    5.0     995.000     948.735
                                   10.0    1020.000    1002.162
                                   25.0    1085.000    1091.436
                                   50.0    1170.000    1190.625
                                   75.0    1280.000    1289.814
                                   90.0    1375.000    1379.088
                                   95.0    1505.000    1432.515
                                   99.0    1600.000    1532.734
```

![alt text](Pictures/proc_uni_qq.png)

45-degree line represents where the data values would fall if they came from normal distribution. There does not appear to be any severe departure from normality.

We use **Kolmogorov-Smirnov** and **Anderson-Darling** to determine if the distribution is normal. Null hypothesis is that distribution is normal. **High p-values are desirable** for normality.

### Exercises

Use sasuser.NormTemp data to answer:

- What are the minimum, maximum, mean and the std for BodyTemp? Does the variable appear to be normally distributed?

```
proc univariate data=sasuser.NormTemp noprint;
	var BodyTemp;
	histogram BodyTemp / normal(mu=est sigma=est noprint) kernel;
	inset min max skewness kurtosis / position=ne;
	probplot BodyTemp / normal(mu=est sigma=est);
	inset min max skewness kurtosis;
run;
```

The distribution appears approximately normal.



## Proc SGPLOT

Procedure creates one or more plots and overlays them on a single set of axes. You can use `SGPLOT` to create statistical graphics such as histograms and regression plots, in addition to simple graphics such as box plots, scatter plots and line plots.

```
proc sgplot <*options*>;
	dot *category-variable* / options;
	hbar *category-variable* / options
	hbox *response-variable* / options
	histogram *response-variable* / options
	needle x = *variable* y = *numeric-variable* / options
	reg x = *numeric-variable* y = *numeric-variable* / options
	scatter x = *variable* y = *variable* / options
	vbar *category-variable* / options
	vbox *response-variable* / options
run;
```

`Vbox` creates a vertical box plot showing the distribution of data
	- `datalabel = option` adds data labels for **outlier markers**

`Hbox` creates a horizontal box plot showing the distribution of data

### Examples

```
/*st101d02.sas*/  /*Part B*/
proc sgplot data=sasuser.testscores;
    vbox SATScore / datalabel=IDNumber;
    format IDNumber 8.;
    refline 1200 / axis=y label;
    title "Box-and-Whisker Plots of SAT Scores";
run;
```

`refline *variable|value-1 ... value-n*` creates a horizontal or vertical reference line
	- `/ axis=` places axis on x or y

`noprint` in `proc univariate` and `histogram` statements suppresses the printing of the tabular output (often used when stats are being reported in insets of plot)


We can also use proc univariate to conduct t-tests:

```
ods graphics off;
proc univariate data=sasuser.testscores mu0=1200;
    var SATScore;
    title 'Testing Whether the Mean of SAT Scores = 1200';
run;
ods graphics on;
```

`mu0=` specifies the value of the mean or location parameter in the null hypothesis for tests of location

Outputs

```
                                 Tests for Location: Mu0=1200

                       Test           -Statistic-    -----p Value------

                       Student's t    t   -0.5702    Pr > |t|    0.5702
                       Sign           M        -5    Pr >= |M|   0.3019
                       Signed Rank    S      -207    Pr >= |S|   0.2866
```

The t-statistic and p-value are labeled Student's t and Pr > |t| respectively

We cannot reject null hypothesis at the 0.05 level in this case


### Exercises

Use sasuser.NormTemp data to answer:

b) Create box plots for BodyTemp. Use ID to identify outliers. Display a reference line at 98.6 degrees. Does the average body temperature seem to be 98.6 degrees?

```
proc sgplot data=sasuser.NormTemp;
	vbox BodyTemp / datalabel=ID;
	format ID 3.;
	refline 98.6 / axis = y label;
run;
```

The average body temperature seems to be somewhat less than 98.6 degrees as was seen in the tabular output


## Proc TTEST

The TTest procedure performs t-tests and computes confidence limits for one sample, paired observations, two independent sample, and the AB/BA crossover design. Can also be used to produce histograms, QQ plots, box plots, and confidence limit plots.

```
proc ttest data=*SAS-data-set*;
	class *variable*;
	paired *variables*;
	var *variables*;
run;
```

`class` specifies the two-level variable for the analysis. **Only one variable** is allowed in the `class` statement.

`paired *pairlists*` specifies the `pairlists` to identify the variables to be compaired in paired comparisons

`var` specifies *numeric* response variables for the analysis



### Example

```
proc ttest data=sasuser.testscores h0=1200
           plots(shownull)=interval;
    var SATScore;
    title 'Testing Whether the Mean of SAT Scores = 1200 '
          'Using PROC TTEST';
run;
```

`H0=` specifies the value of the mean or location parameter in the null hypothesis for tests of location (=0 by default)

`plots(shownull) = interval` includes a plot of *confidence intervals* of the mean. `shownull` places a vertical reference line at the mean value of the null hypothesis

Output:

```
                                     The TTEST Procedure

                                      Variable:  SATScore

                  N        Mean     Std Dev     Std Err     Minimum     Maximum

                 80      1190.6       147.1     16.4416       890.0      1600.0

                    Mean       95% CL Mean        Std Dev      95% CL Std Dev

                  1190.6      1157.9   1223.4       147.1       127.3    174.2

                                     DF    t Value    Pr > |t|

                                     79      -0.57      0.5702
```

Notice the 95% confidence interval around the mean includes null hypothesis value of 1200, implying a lack of statistical significance at the alpha=0.05 level.

Along with this table, we get a QQ plot and the following:

![alt text](Pictures/ttest_plots.png)

## Proc Corr

You can use corr procedure to produce correlation statistics and scatter plots for your data. By default, it produces pearson correlation statistics and corresponding p-values

```
proc corr data=*saas-data-set* options;
	var *variables*;
	with *variables*;
	id *variables*;
run;
```

In the `proc corr` line, you can use:

`plots <(only)> = ( xxxxxx )`

where xxxxx =
- ALL
- Matrix
- Scatter
- Histogram
- Nvar=all|n
- Ellipse=prediction|confidence|none

### Example

```
ods graphics / reset=all imagemap;
proc corr data=sasuser.fitness rank
          plots(only)=scatter(nvar=all ellipse=none);
    var RunTime Age Weight Run_Pulse
        Rest_Pulse Maximum_Pulse Performance;
    with Oxygen_Consumption;
    id name;
    title "Correlations and Scatter Plots with Oxygen_Consumption";
run;
```

Measures oxygen consumption vs all the `var` variables.

```
/*st103d01.sas*/  /*Part B*/
ods graphics / reset=all;
proc corr data=sasuser.fitness nosimple 
          plots=matrix(nvar=all histogram);
    var RunTime Age Weight Run_Pulse
         Rest_Pulse Maximum_Pulse Performance;
    title "Correlations and Scatter Plot Matrix of Fitness Predictors";
run;
```

Creates a matrix of plots which contains regressions of each of the `var` variables against each other. On the diagonals are histograms, as specified in the `matrix(nvar=all histogram)` line. For square matrix plot, you cannot have a `with` statement.

Low p-value -> relationship is statistically relevant. High r -> strong positive correlation. 

## Proc Reg

```
proc reg data=*SAS-data-set* options;
	model *dependents=regressors* / options
run;
quit;
```

**Note:** `quit` statement is required since `reg` procedure supports `run`-group processing.

### Example

```
/*st103d02.sas*/
proc reg data=sasuser.fitness;
    model Oxygen_Consumption = RunTime;
    title 'Predicting Oxygen_Consumption from RunTime';
run;
quit;
```

Results:

```
                                                        Analysis of Variance
 
                                                               Sum of           Mean
                           Source                   DF        Squares         Square    F Value    Pr > F

                           Model                     1      633.01458      633.01458      84.00    <.0001
                           Error                    29      218.53997        7.53586                     
                           Corrected Total          30      851.55455                                    


                                        Root MSE              2.74515    R-Square     0.7434
                                        Dependent Mean       47.37581    Adj R-Sq     0.7345
                                        Coeff Var             5.79442                       


                                                        Parameter Estimates
 
                                                         Parameter       Standard
                           Variable              DF       Estimate          Error    t Value    Pr > |t|

                           Intercept              1       82.42494        3.85582      21.38      <.0001
                           RunTime                1       -3.31085        0.36124      -9.17      <.0001
```


`Mean Square` is the ratio of the sum of squares and the degrees of freedom. Corresponds to the amount of variability associated with each degree of freedom for each source of variation.

`Model` is the variability explained by model (between group)

`error` is variability unexplained by model (within group)

`corrected total` is the total variability in data (Total)

F value tests whether the slope of the predictor variable is equal to 0. Small p-value (less than 0.05) means that you have enough evidence to reject the null hypothesis. Therefore, you can conclude that the simple linear regression model fits the data better than the baseline model.

`Root MSE` root mean square error is an estimate of the standard deviation of the response variable at each value of the predictor value. Square root of the MSE

`Dependent mean` is the overall mean of the response variable

`Coeff Var` is the size of the standard deviation relative to the mean. Calculated as (RootMSE/dependentmean)*100


For **paramater estimate** table:

`Parameter estimate` is the estimated beta value in the simple linear regression

`t value` is the t statistic which is calculated by dividing the parameter estimates by their corresponding standard error estimates



### Multiple linear regression

```
/*st103d04.sas*/
ods graphics off;
proc reg data=sasuser.fitness;
    model Oxygen_Consumption=Performance RunTime;
    title 'Multiple Linear Regression for Fitness Data';
run;
quit;

ods graphics on;
```

Results:

```
 
                                                               Sum of           Mean
                           Source                   DF        Squares         Square    F Value    Pr > F

                           Model                     2      646.33101      323.16550      44.09    <.0001
                           Error                    28      205.22355        7.32941                     
                           Corrected Total          30      851.55455                                    


                                        Root MSE              2.70729    R-Square     0.7590
                                        Dependent Mean       47.37581    Adj R-Sq     0.7418
                                        Coeff Var             5.71450                       


                                                        Parameter Estimates
 
                                                         Parameter       Standard
                           Variable              DF       Estimate          Error    t Value    Pr > |t|

                           Intercept              1       71.52626        8.93520       8.00      <.0001
                           Performance            1        0.06360        0.04718       1.35      0.1885
                           RunTime                1       -2.62163        0.62320      -4.21      0.0002
```
**Note:** Number of parameters in model includes the intercept

`model df` is the number of parameters minus 1 (3-1)

`error df` is the number of observations (31) minus the number of parameters in model (3)

`corrected total df` is number of observations minus 1

`f value` is the MeanSquareModel/MeanSquareError

small p-value -> reject the null hypothesis that B1 = B2 = 0 and conclude that at least one B_i ~= 0

For this case, the model can be written as:

**Oxygen_consumption** = 71.5626 + 0.06360x**Performance** - 2.62163x**RunTime**


### Model Selection

Can eliminate one variable at a time, but manually for large data sets can take an extreme amount of time.

Model Selection options
- Stepwise
- Forward
- Backward

All possible regressions ranked using
- RSquare
- AdjRSQ
- CP

Mallows' Cp
- Indicator of effective variable selection within model
- **Look for models** with `Cp <= p`, where p equals the number of parameters in the model, **including the intercept**
- Mallows recommends choosing the first (fewest variables) model where Cp approaches p

Hocking's criterion
- `Cp <= p` for prediction
- `Cp <= 2p - pfull + 1` for parameter estimation

```
/*st103d05.sas*/  /*Part A*/
ods graphics / imagemap=on;

proc reg data=sasuser.fitness plots(only)=(rsquare adjrsq cp);
    ALL_REG: model oxygen_consumption 
                    = Performance RunTime Age Weight
                      Run_Pulse Rest_Pulse Maximum_Pulse
            / selection=rsquare adjrsq cp;
    title 'Best Models Using All-Regression Option';
run;
quit;
```

`selection=` enables you to choose the different selection models. First listed is the one that determines the sorting order in output
	- RSQUARE
	- ADJRSQ
	- CP

```
/*st103d05.sas*/  /*Part B*/
ods graphics / imagemap=on;

proc reg data=sasuser.fitness plots(only)=(cp);
    ALL_REG: model oxygen_consumption 
                    = Performance RunTime Age Weight
                      Run_Pulse Rest_Pulse Maximum_Pulse
            / selection=cp rsquare adjrsq best=20;
    title 'Best Models Using All-Regression Option';
run;
quit;
```

`best= n` selects the best n models

```
/*st103d06.sas*/
ods graphics off;
proc reg data=sasuser.fitness;
   PREDICT: model Oxygen_Consumption 
                  = RunTime Age Run_Pulse Maximum_Pulse;
   EXPLAIN: model Oxygen_Consumption 
                  = RunTime Age Weight Run_Pulse Maximum_Pulse;
   title 'Check "Best" Two Candidate Models';
run;
quit;

ods graphics on;
```

Can have multiple regressions in same proc reg. Above we are testing the best 'predict' and best 'explain' (see hookings criterion)

### Stepwise selection

`Forward` selects the best one-variable model. Then it selects the best two variables among those that contain the first variable. Stops when it reaches the point where no additional variables have p-value levels less than some stopping criterion (0.50, by default)

`Backward` starts with full model. Next, the variable that is least significant, give the other variables is removed from the model. Continues this process until all of the remaining variables have p-values less than a stopping criterion value (0.10 by default)

`Stepwise` works like a combination of forward and backward. Default entry p-value is 0.15 and the default stay p-value is also 0.15.

**Caution**: Automated model selection results in:
- Biases in parameter estimates, predictions and standard errors
- Incorrect calculation of degrees of freedom
- p-values that tend to err on the side of overestimating significance (increasing type 1 error probability)

```
/*st103d07.sas*/

proc reg data=sasuser.fitness plots(only)=adjrsq;
   FORWARD:  model oxygen_consumption 
                    = Performance RunTime Age Weight
                      Run_Pulse Rest_Pulse Maximum_Pulse
            / selection=forward Slentry=0.10;
   BACKWARD: model oxygen_consumption 
                    = Performance RunTime Age Weight
                      Run_Pulse Rest_Pulse Maximum_Pulse
            / selection=backward Slstay=0.10;
   STEPWISE: model oxygen_consumption 
                    = Performance RunTime Age Weight
                      Run_Pulse Rest_Pulse Maximum_Pulse
            / selection=stepwise;
   title 'Best Models Using Stepwise Selection';
run;
quit;
```


## Proc score

```
proc score data=*sas-data-set* score=*sas-data-set* out=*sas-data-set* other_options;
	var *variables*;
run;
```

Produces predicted values by outputting the parameter estimates from `proc reg` into a data set, and then scoring the new observations in `proc score`

### Example

```
/*st103d03.sas*/
data Need_Predictions;
    input RunTime @@;
    datalines;
9 10 11 12 13
;
run;
```
datalines above represent x values for which a prediction is wanted.

```
proc reg data=sasuser.fitness noprint outest=Betas;
    PredOxy: model Oxygen_Consumption=RunTime;
run;
quit;

proc print data=Betas;
    title "OUTEST= Data Set from PROC REG";
run;

proc score data=Need_Predictions score=Betas
           out=Scored type=parms;
    var RunTime;
run;
```

**Note:** `type=parms` is important when you run `proc score`

```
proc print data=Scored;
    title "Scored New Observations";
run;
```

proc reg p-option is another way to do this:

```
/*st103d03.sas*/  /*Self Study*/ 
data Need_Predictions;
    input RunTime @@;
    datalines;
9 10 11 12 13
;
run;

data Predict;
    set Need_Predictions 
        sasuser.fitness;
run;

ods graphics off;

proc reg data=Predict;
    model Oxygen_Consumption=RunTime / p;
    id RunTime;
    title 'Oxygen_Consumption=RunTime with Predicted Values';   
run;
quit;

ods graphics on;

```





